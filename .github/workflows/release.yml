name: Go

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '*'

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Build docker image
      run: |
        docker login docker.pkg.github.com --username derdanne --password "${{ secrets.GITHUB_TOKEN }}"
        docker build . -t docker.pkg.github.com/derdanne/stern/stern:$(echo ${GITHUB_REF#refs/tags/} | sed 's/\//_/g')
        docker push docker.pkg.github.com/derdanne/stern/stern:$(echo ${GITHUB_REF#refs/tags/} | sed 's/\//_/g')
        docker tag docker.pkg.github.com/derdanne/stern/stern:$(echo ${GITHUB_REF#refs/tags/} | sed 's/\//_/g') docker.pkg.github.com/derdanne/stern/stern:latest
        docker push docker.pkg.github.com/derdanne/stern/stern:latest

    - name: Get dependencies
      run: go mod download

    - name: Build linux amd64
      run: |
        mkdir -p artifacts/latest/linux_amd64
        export CGO_ENABLED=0
        GOOS=linux GOARCH=amd64 go build \
            -ldflags="-s -X github.com/derdanne/stern.GitCommit=${{ github.ref }} -X github.com/derdanne/stern.PatchVersion=$(( ($(date +%s) - $(date --date=20150101 +%s) )/(60*60*24) )) -X github.com/derdanne/stern.Compiled=$(date +%s)" \
            -installsuffix cgo \
            -o artifacts/latest/linux_amd64/stern

    - name: Build darwin amd64
      run: |
            mkdir -p artifacts/latest/darwin_amd64
            export CGO_ENABLED=0
            GOOS=darwin GOARCH=amd64 go build \
                -ldflags="-s -X github.com/derdanne/stern.GitCommit=${{ github.ref }} -X github.com/derdanne/stern.PatchVersion=$(( ($(date +%s) - $(date --date=20150101 +%s) )/(60*60*24) )) -X github.com/derdanne/stern.Compiled=$(date +%s)" \
                -installsuffix cgo \
                -o artifacts/latest/darwin_amd64/stern

    - name: Build windows amd64
      run: |
        mkdir -p artifacts/latest/windows_amd64
        export CGO_ENABLED=0
        GOOS=windows GOARCH=amd64 go build \
            -ldflags="-s -X github.com/derdanne/stern.GitCommit=${{ github.ref }} -X github.com/derdanne/stern.PatchVersion=$(( ($(date +%s) - $(date --date=20150101 +%s) )/(60*60*24) )) -X github.com/derdanne/stern.Compiled=$(date +%s)" \
            -installsuffix cgo \
            -o artifacts/latest/windows_amd64/stern.exe

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset linux amd64
      id: upload-release-asset-linux-amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/latest/linux_amd64/stern
        asset_name: stern_linux_amd64
        asset_content_type: application/zip
    
    - name: Upload Release Asset darwin amd64
      id: upload-release-asset-darwin-amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/latest/darwin_amd64/stern
        asset_name: stern_darwin_amd64
        asset_content_type: application/zip
    
    - name: Upload Release Asset windows amd64
      id: upload-release-asset-windows-amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/latest/windows_amd64/stern.exe
        asset_name: stern_windows_amd64
        asset_content_type: application/zip